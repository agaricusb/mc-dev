package net.minecraft.server;

import java.io.IOException;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.Socket;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.util.logging.Logger;
import javax.crypto.SecretKey;

public class NetLoginHandler extends NetHandler
{
    private byte[] d;

    /** The Minecraft logger. */
    public static Logger logger = Logger.getLogger("Minecraft");

    /** The Random object used to generate serverId hex strings. */
    private static Random random = new Random();
    public NetworkManager networkManager;

    /**
     * Returns if the login handler is finished and can be removed. It is set to true on either error or successful
     * login.
     */
    public boolean c = false;

    /** Reference to the MinecraftServer object. */
    private MinecraftServer server;

    /** While waiting to login, if this field ++'s to 600 it will kick you. */
    private int g = 0;
    private String h = null;
    private volatile boolean i = false;

    /** server ID that is randomly generated by this login handler. */
    private String loginKey = "";
    private SecretKey k = null;

    public NetLoginHandler(MinecraftServer par1MinecraftServer, Socket par2Socket, String par3Str) throws IOException
    {
        this.server = par1MinecraftServer;
        this.networkManager = new NetworkManager(par2Socket, par3Str, this, par1MinecraftServer.F().getPrivate());
        this.networkManager.e = 0;
    }

    /**
     * Logs the user in if a login packet is found, otherwise keeps processing network packets unless the timeout has
     * occurred.
     */
    public void c()
    {
        if (this.i)
        {
            this.d();
        }

        if (this.g++ == 600)
        {
            this.disconnect("Took too long to log in");
        }
        else
        {
            this.networkManager.b();
        }
    }

    /**
     * Disconnects the user with the given reason.
     */
    public void disconnect(String par1Str)
    {
        try
        {
            logger.info("Disconnecting " + this.getName() + ": " + par1Str);
            this.networkManager.queue(new Packet255KickDisconnect(par1Str));
            this.networkManager.d();
            this.c = true;
        }
        catch (Exception var3)
        {
            var3.printStackTrace();
        }
    }

    public void a(Packet2Handshake par1Packet2ClientProtocol)
    {
        this.h = par1Packet2ClientProtocol.f();

        if (!this.h.equals(StripColor.a(this.h)))
        {
            this.disconnect("Invalid username!");
        }
        else
        {
            PublicKey var2 = this.server.F().getPublic();

            if (par1Packet2ClientProtocol.d() != 49)
            {
                if (par1Packet2ClientProtocol.d() > 49)
                {
                    this.disconnect("Outdated server!");
                }
                else
                {
                    this.disconnect("Outdated client!");
                }
            }
            else
            {
                this.loginKey = this.server.getOnlineMode() ? Long.toString(random.nextLong(), 16) : "-";
                this.d = new byte[4];
                random.nextBytes(this.d);
                this.networkManager.queue(new Packet253KeyRequest(this.loginKey, var2, this.d));
            }
        }
    }

    public void a(Packet252KeyResponse par1Packet252SharedKey)
    {
        PrivateKey var2 = this.server.F().getPrivate();
        this.k = par1Packet252SharedKey.a(var2);

        if (!Arrays.equals(this.d, par1Packet252SharedKey.b(var2)))
        {
            this.disconnect("Invalid client reply");
        }

        this.networkManager.queue(new Packet252KeyResponse());
    }

    public void a(Packet205ClientCommand par1Packet205ClientCommand)
    {
        if (par1Packet205ClientCommand.a == 0)
        {
            if (this.server.getOnlineMode())
            {
                (new ThreadLoginVerifier(this)).start();
            }
            else
            {
                this.i = true;
            }
        }
    }

    public void a(Packet1Login par1Packet1Login) {}

    /**
     * on success the specified username is connected to the minecraftInstance, otherwise they are packet255'd
     */
    public void d()
    {
        String var1 = this.server.getServerConfigurationManager().attemptLogin(this.networkManager.getSocketAddress(), this.h);

        if (var1 != null)
        {
            this.disconnect(var1);
        }
        else
        {
            EntityPlayer var2 = this.server.getServerConfigurationManager().processLogin(this.h);

            if (var2 != null)
            {
                this.server.getServerConfigurationManager().a(this.networkManager, var2);
            }
        }

        this.c = true;
    }

    public void a(String par1Str, Object[] par2ArrayOfObj)
    {
        logger.info(this.getName() + " lost connection");
        this.c = true;
    }

    /**
     * Handle a server ping packet.
     */
    public void a(Packet254GetInfo par1Packet254ServerPing)
    {
        try
        {
            ServerConfigurationManagerAbstract var2 = this.server.getServerConfigurationManager();
            String var3 = null;

            if (par1Packet254ServerPing.a == 1)
            {
                List var4 = Arrays.asList(new Serializable[] {Integer.valueOf(1), Integer.valueOf(49), this.server.getVersion(), this.server.getMotd(), Integer.valueOf(var2.getPlayerCount()), Integer.valueOf(var2.getMaxPlayers())});
                Object var6;

                for (Iterator var5 = var4.iterator(); var5.hasNext(); var3 = var3 + var6.toString().replaceAll("\u0000", ""))
                {
                    var6 = var5.next();

                    if (var3 == null)
                    {
                        var3 = "\u00a7";
                    }
                    else
                    {
                        var3 = var3 + "\u0000";
                    }
                }
            }
            else
            {
                var3 = this.server.getMotd() + "\u00a7" + var2.getPlayerCount() + "\u00a7" + var2.getMaxPlayers();
            }

            InetAddress var8 = null;

            if (this.networkManager.getSocket() != null)
            {
                var8 = this.networkManager.getSocket().getInetAddress();
            }

            this.networkManager.queue(new Packet255KickDisconnect(var3));
            this.networkManager.d();

            if (var8 != null && this.server.ae() instanceof DedicatedServerConnection)
            {
                ((DedicatedServerConnection)this.server.ae()).a(var8);
            }

            this.c = true;
        }
        catch (Exception var7)
        {
            var7.printStackTrace();
        }
    }

    /**
     * Default handler called for packets that don't have their own handlers in NetServerHandler; kicks player from the
     * server.
     */
    public void onUnhandledPacket(Packet par1Packet)
    {
        this.disconnect("Protocol error");
    }

    public String getName()
    {
        return this.h != null ? this.h + " [" + this.networkManager.getSocketAddress().toString() + "]" : this.networkManager.getSocketAddress().toString();
    }

    /**
     * determine if it is a server handler
     */
    public boolean a()
    {
        return true;
    }

    /**
     * Returns the server Id randomly generated by this login handler.
     */
    static String a(NetLoginHandler par0NetLoginHandler)
    {
        return par0NetLoginHandler.loginKey;
    }

    /**
     * Returns the reference to Minecraft Server.
     */
    static MinecraftServer b(NetLoginHandler par0NetLoginHandler)
    {
        return par0NetLoginHandler.server;
    }

    static SecretKey c(NetLoginHandler par0NetLoginHandler)
    {
        return par0NetLoginHandler.k;
    }

    /**
     * Returns the connecting client username.
     */
    static String d(NetLoginHandler par0NetLoginHandler)
    {
        return par0NetLoginHandler.h;
    }

    static boolean a(NetLoginHandler par0NetLoginHandler, boolean par1)
    {
        return par0NetLoginHandler.i = par1;
    }
}
